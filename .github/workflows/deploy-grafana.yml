name: CBT-Vista-Grafana-Frontend

on:
  push:
    branches:
      - develop
      #- sandbox
      - main
  workflow_dispatch:

jobs:
  CBT-Vista-Grafana-Frontend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          case "${{ github.ref_name }}" in
            "develop")
              echo "DEPLOY_NAMESPACE=monitoring" >> $GITHUB_ENV
              echo "AWS_REGION=${{ secrets.DEV_AWS_REGION }}" >> $GITHUB_ENV
              echo "ECR_REPOSITORY=${{ secrets.DEV_ECR_REPOSITORY }}" >> $GITHUB_ENV
              echo "EKS_CLUSTER_NAME=${{ secrets.DEV_EKS_CLUSTER_NAME }}" >> $GITHUB_ENV
              echo "AWS_ACCOUNT_ID=${{ secrets.DEV_AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
              echo "AWS_ROLE_TO_ASSUME=${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
              echo "DEPLOYMENT_FILE=deployment-dev.yaml" >> $GITHUB_ENV
              ;;
            "main")
              echo "DEPLOY_NAMESPACE=vista-prod" >> $GITHUB_ENV
              echo "AWS_REGION=${{ secrets.PROD_AWS_REGION }}" >> $GITHUB_ENV
              echo "ECR_REPOSITORY=${{ secrets.PROD_ECR_REPOSITORY }}" >> $GITHUB_ENV
              echo "EKS_CLUSTER_NAME=${{ secrets.PROD_EKS_CLUSTER_NAME }}" >> $GITHUB_ENV
              echo "AWS_ACCOUNT_ID=${{ secrets.PROD_AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
              echo "AWS_ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> $GITHUB_ENV
              echo "DEPLOYMENT_FILE=deployment-prod.yaml" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid branch: ${{ github.ref_name }}"
              exit 1
              ;;
          esac

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.24.0'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

          echo "Building Docker Image: $IMAGE_URI"

          docker build -t custom-grafana .
          docker tag custom-grafana "$IMAGE_URI"
          docker push "$IMAGE_URI"

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace ${{ env.DEPLOY_NAMESPACE }} || kubectl create namespace ${{ env.DEPLOY_NAMESPACE }}

      - name: Update Kubernetes Manifests
        run: |
          sed -i "s|NEW_ECR_IMAGE|${{ env.IMAGE_URI }}|g" Manifest_files/${{ env.DEPLOYMENT_FILE }}
          sed -i "s|DEPLOY_NAMESPACE|${{ env.DEPLOY_NAMESPACE }}|g" Manifest_files/${{ env.DEPLOYMENT_FILE }}
          sed -i "s|DEPLOY_NAMESPACE|${{ env.DEPLOY_NAMESPACE }}|g" Manifest_files/service.yaml
  
      - name: Deploy to EKS
        run: |
          kubectl apply -f Manifest_files/${{ env.DEPLOYMENT_FILE }}
          kubectl apply -f Manifest_files/service.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/grafana-frontend -n ${{ env.DEPLOY_NAMESPACE }} --timeout=5m
          kubectl get pods -n ${{ env.DEPLOY_NAMESPACE }}